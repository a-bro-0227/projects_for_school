{
    "collab_server" : "",
    "contents" : "#clear workspace\nrm(list = ls())\n\n#====library bank====\nsuppressMessages(library(tidyverse,\n                         warn.conflicts = F,\n                         quietly = T))\nlibrary(RODBC)\nlibrary(lubridate, warn.conflicts = F)\nlibrary(scales, warn.conflicts = F)\n\n#====connect to database====\naccess_database <- paste0(\"F:/School/Tippie_Business Analytics/Health Care Analytics\", \"/openmrs.accdb\") #database locaction\n\nopenmrs <- odbcDriverConnect(paste0(\"Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=\",            #connect to\n                                    access_database))                                                    #openmrs database\n\n\n#====reading in dataset====\nmrs_patient <- sqlFetch(openmrs, \"mrs_patient\",                 #what table to `fetch` from the `openmrs` database we connected to\n                        as.is = FALSE,\n                        stringsAsFactors = FALSE,\n                        na.strings = c(\"\", \"N/A\")) %>%\n  filter(!is.na(birthdate)) %>%                                  #filter out blank entries\n  select(patient_id,                                             #call out columns needed\n         gender,\n         birthdate,\n         tribe_id = tribe,\n         city_village,\n         country)\n\nmrs_obs <- sqlFetch(openmrs, \"mrs_obs\",\n                    as.is = F,\n                    stringsAsFactors = FALSE,\n                    na.strings = c(\"\", \"N/A\")) %>%\n  select(obs_id,\n         patient_id,\n         encounter_id,\n         concept_id,\n         obs_datetime,\n         value_coded,\n         value_numeric,\n         comments)\n\n\nmrs_concept <- sqlFetch(openmrs, \"mrs_concept\",\n                        as.is = F,\n                        stringsAsFactors = FALSE,\n                        na.strings = c(\"\", \"N/A\")) %>%\n  select(concept_id,\n         concept_name,\n         retired,\n         short_name,\n         description,\n         datatype,\n         concept_class,\n         is_set,\n         hi_absolute,\n         hi_critical,\n         hi_normal,\n         low_absolute,\n         low_critical,\n         low_normal,\n         units,\n         precise)\n\nmrs_encounter <- sqlFetch(openmrs, \"mrs_encounter\",\n                          as.is = F,\n                          stringsAsFactors = FALSE,\n                          na.strings = c(\"\", \"N/A\")) %>%\n  select(encounter_id,\n         encounter_type_id = encounter_type,\n         patient_id,\n         encounter_datetime)\n\n\nmrs_encounter_type <- sqlFetch(openmrs, \"mrs_encounter_type\",\n                               as.is = F,\n                               stringsAsFactors = FALSE,\n                               na.strings = c(\"\", \"N/A\")) %>%\n  select(encounter_type_id,\n         encounter_type_name = name,\n         encounter_description = description)\n\nmrs_tribe <- sqlFetch(openmrs, \"mrs_tribe\",\n                      as.is = F,\n                      stringsAsFactors = FALSE,\n                      na.strings = c(\"\", \"N/A\")) %>%\n  select(tribe_id, tribe_name = name)\n\nmrs_program <- sqlFetch(openmrs, \"mrs_program\",\n                        as.is = F,\n                        stringsAsFactors = FALSE,\n                        na.strings = c(\"\", \"N/A\")) %>%\n  select(program_id, program_name = name)\n\nmrs_patient_program <- sqlFetch(openmrs, \"mrs_patient_program\",\n                                as.is = F,\n                                stringsAsFactors = FALSE,\n                                na.strings = c(\"\", \"N/A\")) %>%\n  filter(voided != 1) %>%                                        #filter out voided to avoid any entry mistakes\n  select(patient_program_id,\n         patient_id,\n         program_id,\n         date_enrolled,\n         date_completed,\n         voided)\n#====write dataframes used====\ndfs <- sapply(.GlobalEnv, is.data.frame) #list all dataframes\ndfs <- dfs[dfs == T]\n\nnames(dfs)\n\nmapply(write.csv, mget(names(dfs)[dfs]),\n       file = paste0(\"F:/School/Tippie_Business Analytics/Health Care Analytics/Project/tables_used/\",\n                     names(dfs)[dfs], \".csv\"),\n       row.names = F, na = \"\")\n\n#====data frames used====\ndfs <- sapply(.GlobalEnv, is.data.frame)\ndfs <- dfs[dfs == T]\ndata.frame(TablesUsed = names(dfs))\n\n#=====encounter table====\ndf_encounter <- mrs_encounter %>%\n  left_join(mrs_encounter_type %>%                #join encounter type\n              select(-encounter_description),\n            by = \"encounter_type_id\")\n\ndf_encounter %>%\n  count(encounter_type_name) %>%                   #count the number of each `encounter_type`\n  ggplot(aes(x = encounter_type_name, y = n)) +    #graphs the count of `encounter_type`\n  geom_bar(stat = \"identity\") +                    #with a bar graph\n  geom_text(aes(label = comma(n)),                 #add labels to the graph with a 1,000's comma\n            position = position_dodge(0.9),\n            vjust = -0.3) +\n  ggtitle(\"Count of Encounter Types\") +            #add title\n  xlab(\"Encounter Type\") +                         #ad axes titles\n  ylab(\"Count of Encounters\") + \n  scale_y_continuous(labels = comma) +             #set y-axis lables to with a 1,000's comma\n  theme(plot.title = element_text(face = \"bold\"))  #set header to bold\n\ncount_patient_return <- df_encounter %>% count(patient_id, encounter_type_name)\n\ndata.frame(count_patient_return %>% filter(encounter_type_name == \"ADULTINITIAL\"))\n\ndata.frame(count_patient_return %>% filter(encounter_type_name == \"ADULTINITIAL\") %>%\n             inner_join(count_patient_return,\n                        by = \"patient_id\") %>%\n             select(patient_id, encounter_type_name = encounter_type_name.y, n = n.y))\n\n\n\ncount_patient_return <- count_patient_return %>%\n  filter(encounter_type_name != \"ADULTRETURN\" )\n\ndata.frame(count_patient_return %>%\n             count(n) %>%\n             rename(number_of_returns = n,\n                    freq_patients_returning = nn))\n#====program table====\ndf_program <- mrs_patient_program %>% \n  left_join(mrs_program,\n            by = \"program_id\")\n\ndf_program_in <- df_program %>%\n  count(patient_id, program_name) %>%\n  spread(key = program_name, value = n) %>%\n  mutate(program_in = ifelse(!is.na(`HIV Program`) & is.na(`TB Program`), \"HIV Program\",\n                             ifelse(is.na(`HIV Program`) & !is.na(`TB Program`), \"TB Program\",\n                                    ifelse(!is.na(`HIV Program`) & !is.na(`TB Program`), \"Both Programs\",\n                                           \"Review\")))) %>%\n  select(patient_id, program_in)\n\n#how many people in each program\ndata.frame(df_program_in %>%\n             count(program_in)) %>%\n  mutate(freq = round(n/sum(n), 2)) %>%\n  arrange(desc(n))\n\n#====obs table====\ndf_obs <- mrs_obs %>%\n  left_join(mrs_concept %>%\n              select(concept_id, concept_name, short_name,\n                     description, datatype, concept_class,\n                     hi_absolute, hi_critical, hi_normal,\n                     low_absolute, low_critical, low_normal,\n                     units, precise),\n            by = \"concept_id\") %>%\n  left_join(., y = mrs_concept %>%\n              select(concept_id,\n                     ans_name = concept_name,\n                     ans_description = description),\n            by = c(\"value_coded\" = \"concept_id\"))\n\n#df_hiv\ndf_hiv <- df_obs %>%\n  filter(grepl(\"CURRENT WHO HIV STAGE\", concept_name, ignore.case = T) & !is.na(ans_name)) %>%\n  select(encounter_id, patient_id, hiv_stage = ans_name) %>%\n  distinct() %>%\n  mutate(hiv_stage = as.integer(gsub(\"\\\\D\", \"\", hiv_stage))) %>%\n  distinct()\n\ndata.frame(head(df_hiv %>% count(patient_id, hiv_stage) %>% filter(n > 1)))\ndata.frame(head(df_hiv %>% count(encounter_id) %>% filter(n > 1)))\ndata.frame(df_hiv %>% filter(encounter_id == 6379))\n\n\n\n#df_value\ndf_value <- df_obs %>%\n  filter(datatype == \"Numeric\", value_numeric != 0) %>%\n  select(encounter_id, patient_id, concept_name, description,\n         ans_value = value_numeric) %>%\n  mutate(concept_name = tolower(gsub(\" \", \"_\",\n                                     ifelse(grepl(\"CD3\", concept_name),\n                                            ifelse(grepl(\"(T-Suppressor or killer cells)\", description), \"killer_tcells\",\n                                                   ifelse(grepl(\"(T-helper cells)\", description), \"helper_tcells\",\n                                                          ifelse(grepl(\"Percentage of T-helper\", description), \"pct_helper_tcells\",\n                                                                 concept_name))), concept_name)))) %>%\n  distinct()\n\ndf_value <- df_value %>%\n  left_join(df_value %>% count(concept_name),\n            by = \"concept_name\")  %>%\n  filter(n > 1000) %>% select(-n) %>%\n  mutate(concept_name = gsub(\"number_of_|\\\\(|\\\\)\", \"\", concept_name))\n\ndf_value %>% group_by(concept_name) %>% tally()\ndata.frame(df_value %>% count(concept_name) %>% arrange(n))\n\ndf_value <- df_value %>%\n  select(-description) %>%\n  spread(key = concept_name, value = ans_value)\n\n#df_rash\ndf_rash <- df_obs %>%\n  filter(concept_class == \"Finding\" & ans_name == \"RASH\") %>%\n  select(encounter_id, patient_id, rash = ans_name) %>%\n  distinct()\n\n#df_diagnosis\ndf_diagnosis <- df_obs %>%\n  filter(concept_class == \"Diagnosis\") %>%\n  select(encounter_id, patient_id, added_diagnosis = ans_name) %>%\n  mutate(added_diagnosis = \"Y\") %>%\n  distinct()\n\n#df_tb\ndf_tb <- df_obs %>%\n  filter(grepl(\"Current TB Treatment\", concept_name, ignore.case = T), ans_name != \"NONE\") %>%\n  select(patient_id, encounter_id, tb_treatement = ans_name) %>%\n  mutate(tb_treatement = \"Y\") %>% distinct()\n\n#df_test\ndf_test <- df_obs %>%\n  filter(concept_class == \"Test\" & is.na(value_numeric) &\n           concept_name != \"IMMUNIZATIONS ORDERED\" &\n           ans_name != \"INDETERMINATE\") %>%\n  mutate(concept_name = ifelse(grepl(\"HIV\", concept_name), short_name, concept_name),\n         concept_name = ifelse(grepl(\"SYPHILIS\", concept_name), \"SYPHILIS\", concept_name),\n         concept_name = tolower(gsub(\" \", \"_\", concept_name))) %>%\n  select(patient_id, encounter_id, concept_name, ans_name) %>%\n  spread(key = concept_name, value = ans_name)\n\n#====patient table====\ndf_patient <- mrs_patient %>% filter(is.na(country)) %>%\n  left_join(mrs_tribe, by = \"tribe_id\") %>%\n  select(-c(country, tribe_id))\n\ndf_patient %>%\n  count(tribe_name) %>%                            #count the number of each `tribe_name`\n  ggplot(aes(x = tribe_name, y = n)) +             #graphs the count of `tribe_name`\n  geom_bar(stat = \"identity\") +                    #with a bar graph\n  geom_text(aes(label = comma(n)),                 #add labels to the graph with a 1,000's comma\n            position = position_dodge(0.9),\n            vjust = -0.3) +\n  ggtitle(\"Number of Patients in Each Tribe \") +   #add title\n  xlab(\"Tribe Name\") +                             #ad axes titles\n  ylab(\"Count of Patients\") + \n  scale_y_continuous(labels = comma) +             #set y-axis lables to with a 1,000's comma\n  theme(plot.title = element_text(face = \"bold\"))  #set header to bold\n\n#====combine info====\ncomb_df <- df_encounter %>%\n  left_join(df_patient,\n            by = \"patient_id\") %>%\n  mutate(age = time_length(difftime(encounter_datetime, birthdate), \"years\")) %>%\n  left_join(., df_program_in, by = \"patient_id\") %>%\n  left_join(., df_hiv,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  left_join(., df_tb,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  left_join(., df_diagnosis,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  left_join(., df_rash,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  left_join(., df_test,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  left_join(., df_value,\n            by = c(\"encounter_id\", \"patient_id\")) %>%\n  mutate(hiv_stage = ifelse(!is.na(hiv_stage), paste0(\"STAGE \", hiv_stage), hiv_stage)) %>%\n  filter(encounter_type_name == \"ADULTRETURN\") %>%\n  select(-encounter_type_id)\n\ndup_check <- comb_df[duplicated(comb_df$encounter_id) | duplicated(comb_df$encounter_id, fromLast = T), ]\n\ncomb_df <- comb_df %>% filter(!duplicated(encounter_id) & !duplicated(comb_df$encounter_id, fromLast = T))\n\ncomb_df %>%\n  filter(!is.na(killer_tcells) & !is.na(helper_tcells) & !is.na(hiv_stage)) %>%\n  ggplot(aes(x = killer_tcells, y = helper_tcells, colour = hiv_stage)) +\n  geom_point() +\n  ggtitle(\"T-Cell Comparison at Different Stages of HIV\") +  #add title\n  xlab(\"Killer T-Cells\") +                                   #ad axes titles\n  ylab(\"Helper T-Cells\") + \n  scale_y_continuous(labels = comma) +             #set y-axis lables to with a 1,000's comma\n  scale_x_continuous(labels = comma) +\n  theme(plot.title = element_text(face = \"bold\"))  #set header to bold\n\ncomb_df %>%\n  filter(!is.na(killer_tcells) & !is.na(helper_tcells) & !is.na(hiv_stage)) %>%\n  ggplot(aes(x = killer_tcells, y = helper_tcells, colour = hiv_stage)) +\n  geom_point() +\n  facet_wrap( ~ hiv_stage, ncol = 2) +\n  ggtitle(\"T-Cell Comparison at Different Stages of HIV\") +  #add title\n  xlab(\"Killer T-Cells\") +                                   #ad axes titles\n  ylab(\"Helper T-Cells\") + \n  scale_y_continuous(labels = comma) +             #set y-axis lables to with a 1,000's comma\n  scale_x_continuous(labels = comma) +\n  theme(plot.title = element_text(face = \"bold\"))  #set header to bold\n\ncomb_df %>%\n  mutate(other_diagnoses = ifelse(!is.na(tb_treatement) & !is.na(rash) & !is.na(added_diagnosis),\n                                  \"TB_RASH_ADDED\", ifelse(!is.na(tb_treatement) & !is.na(rash) & is.na(added_diagnosis),\n                                                          \"TB_RASH\", ifelse(!is.na(tb_treatement) & is.na(rash) & !is.na(added_diagnosis),\n                                                                            \"TB_ADDED\", ifelse(is.na(tb_treatement) & !is.na(rash) & !is.na(added_diagnosis),\n                                                                                               \"RASH_OTHER\",\n                                                                                               ifelse(!is.na(tb_treatement),\"TB\",\n                                                                                                      ifelse(!is.na(rash), \"RASH\",\n                                                                                                             ifelse(!is.na(added_diagnosis), \"ADDED\", NA)))))))) %>%\n  count(hiv_stage, other_diagnoses) %>%\n  filter(!is.na(hiv_stage) & !is.na(other_diagnoses)) %>%\n  ggplot(aes(x = hiv_stage, y = other_diagnoses, fill = n)) +\n  geom_tile() +\n  scale_fill_gradient(low = \"pink\", high = \"red\") +\n  ggtitle(\"Other Diagnoses at Different HIV Stages\") +  #add title\n  xlab(\"HIV Stage\") +                                   #ad axes titles\n  ylab(\"Other Diagnoses Found\") + \n  theme(plot.title = element_text(face = \"bold\"))  #set header to bold\n\ncomb_df %>%\n  filter(!is.na(absolute_lymphocyte_count), !is.na(blood_platelet), !is.na(hiv_stage)) %>%\n  ggplot(aes(x = absolute_lymphocyte_count, y = blood_platelet, colour = hiv_stage)) +\n  geom_point() +\n  facet_wrap( ~ hiv_stage) +\n  scale_x_log10() +\n  scale_y_log10()\n\nnrow(comb_df %>% filter(!is.na(killer_tcells) & !is.na(helper_tcells) & !is.na(hiv_stage)))/nrow(comb_df)\nnrow(comb_df %>% filter(!is.na(absolute_lymphocyte_count), !is.na(blood_platelet), !is.na(hiv_stage)))/nrow(comb_df)\n",
    "created" : 1540412227554.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2069869878",
    "id" : "5516CF11",
    "lastKnownWriteTime" : 1540876242,
    "last_content_update" : 1540876242059,
    "path" : "~/GitHub/projects_for_school/HealthCareAnal/HealthCare_Project_v2.R",
    "project_path" : "HealthCare_Project_v2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}