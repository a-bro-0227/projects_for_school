ggplot(aes(x = Time, y = weight,  #Time on x axis, weight on y axis
color = Diet)) +       #different color for each Diet
geom_point() +                    #point layer
geom_line() +                     #line layer
theme(legend.position = "bottom") #put legend on the bottom
avgWeight %>%
ggplot(aes(x = Time, y = avgWeight,  #Time on x axis, weight on y axis
color = Diet)) +          #different color for each Diet
geom_point() +                    #point layer
geom_line() +                     #line layer
theme(legend.position = "bottom") #put legend on the bottom
LifeCycleSavings
complete <- ChickWeight %>%
add_count(Chick) %>%
filter(n == 12) %>%
drop(n)
complete <- ChickWeight %>%
add_count(Chick) %>%
filter(n == 12) %>%
select(-n)
rm(list = ls())
suppressPackageStartupMessages(library(tidyverse))
data(ChickWeight)
?ChickWeight
glimpse(ChickWeight)
ChickWeight %>%
count(Chick) %>%                          #count how many observations of each `Chick` there were
mutate(CompleteStatus = ifelse(n < 12,    #if there were less than 12 then note as
"Incomplete",    #Incomplete, otherwise note as
"Complete")) %>% #Complete
count(CompleteStatus)                     #then count how many complete and incomplete observation there are
complete <- ChickWeight %>%
add_count(Chick) %>%
filter(n == 12) %>%
select(-n)                 #remove count column as it is no longer needed
complete <- complete %>%
left_join(y = complete %>%
filter(Time == 0) %>%                #subset `Time` on day 0
select(Chick, origweight = weight),  #select only needed columns so there will not be extra variables
by = "Chick") %>%                      #join by `Chick`
mutate(weightgain = weight - origweight) %>%     #subtrack `origweight` from `weight` to get `weightgain`
select(-origweight)                              #remove helper column so it can be run again
complete %>% filter(Time == 21) %>%
ggplot(aes(x = reorder(Diet, weightgain, FUN = median, na.rm = T),
y = weightgain)) +
geom_boxplot() +
lab(x = "Diet")
complete %>% filter(Time == 21) %>%
ggplot(aes(x = reorder(Diet, weightgain, FUN = median, na.rm = T),
y = weightgain)) +
geom_boxplot() +
xlab(x = "Diet")
complete %>% filter(Time == 21) %>%
ggplot(aes(x = reorder(Diet, weightgain, FUN = median, na.rm = T),
y = weightgain)) +
geom_boxplot() +
xlab("Diet")
complete %>%
group_by(Diet) %>%
filter(weight == max(weight),
Time == 21)
maxChick <- complete %>%
inner_join(y = complete %>%
group_by(Diet) %>%
filter(weight == max(weight), Time == 21) %>%
select(Diet, Chick),
by = c("Diet", "Chick"))
data.frame(ChickWeight %>%
count(Chick) %>%                          #count how many observations of each `Chick` there were
mutate(CompleteStatus = ifelse(n < 12,    #if there were less than 12 then note as
"Incomplete",    #Incomplete, otherwise note as
"Complete")) %>% #Complete
count(CompleteStatus))                     #then count how many complete and incomplete observation there are
happy <- read_csv("F:/School/ISU/Visual Business Analytics/Data and Markdown files/Related Materials week 07/happy.csv")
library(readr)
happy <- read_csv("F:/School/ISU/Visual Business Analytics/Data and Markdown files/Related Materials week 07/happy.csv")
hdata <- happy
ggplot(hdata, aes(x = factor(year), fill = happy)) + geom_bar(position = 'fill')
library(ggplot2)
ggplot(hdata, aes(x = factor(year), fill = happy)) + geom_bar(position = 'fill')
hdata %>%
ggplot(aes(x = factor(year), fill = happy)) + geom_bar(position = 'fill')
hdata %>% filter(!is.na(happy))
library(dplyr)
ggplot(aes(x = factor(year), fill = happy)) + geom_bar(position = 'fill')
hdata %>% filter(!is.na(happy)) %>%
ggplot(aes(x = factor(year), fill = happy)) + geom_bar(position = 'fill')
hdata %>% filter(!is.na(happy)) %>%
group_by(year) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy))
hdata %>% filter(!is.na(happy)) %>%
group_by(year) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy)) + geom_point()
hdata %>% filter(!is.na(happy)) %>%
group_by(year) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy)) + geom_point(method = "lm")
hdata %>% filter(!is.na(happy)) %>%
group_by(year) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy)) + geom_point() + geom_smooth(method = "lm")
hdata %>% filter(!is.na(happy)) %>%
group_by(year) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy, colour = sex)) + geom_point() + geom_smooth(method = "lm")
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
summarise(perchappy = sum(happy == "VERY HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy, colour = sex)) + geom_point() + geom_smooth(method = "lm")
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
summarise(perchappy = sum(happy == "Not TOO HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy, colour = sex)) + geom_point() + geom_smooth(method = "lm")
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
summarise(perchappy = sum(happy == "Not TOO HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy, colour = sex)) + geom_point() + geom_smooth()
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
summarise(perchappy = sum(happy == "NOT TOO HAPPY")/n()*100,
n = n()) %>%
ggplot(aes(x = year, y = perchappy, colour = sex)) + geom_point() + geom_smooth()
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
mutate(total = n())
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
mutate(total = n()) %>%
group_by(year, sex, happy) %>%
summarise(perc = n()/mean(total)*100) %>%
ggplot(aes(x = year, y = perc, colour = sex)) + geom_point() + geom_smooth()
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
mutate(total = n()) %>%
group_by(year, sex, happy) %>%
summarise(perc = n()/mean(total)*100) %>%
ggplot(aes(x = year, y = perc, colour = sex)) + geom_point()
hdata %>% filter(!is.na(happy)) %>%
group_by(year, sex) %>%
mutate(total = n()) %>%
group_by(year, sex, happy) %>%
summarise(perc = n()/mean(total)*100) %>%
ggplot(aes(x = year, y = perc, colour = happy, shape = sex)) + geom_point() + geom_smooth()
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
group_by(year, sex) %>%
mutate(total = n()) %>%
group_by(year, sex, happy) %>%
summarise(perc = n()/mean(total)*100) %>%
ggplot(aes(x = year, y = perc, colour = happy, shape = sex)) + geom_point() + geom_smooth()
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
group_by(year, sex) %>%
mutate(total = n()) %>%
group_by(year, sex, happy) %>%
summarise(perc = n()/mean(total)*100) %>%
ggplot(aes(x = year, y = perc, colour = happy, shape = sex)) + geom_point() + geom_smooth(aes(group = happy))
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
ggplot(aes(x = age, fill = happy)) + geom_bar(position = "fill")
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
ggplot(aes(x = age, fill = happy)) + geom_bar(position = "fill") +
facet_grid( ~ sex)
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
ggplot(aes(x = age, fill = happy)) + geom_bar(position = "fill") +
facet_grid(sex ~ )
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
ggplot(aes(x = age, fill = happy)) + geom_bar(position = "fill") +
facet_grid(sex ~ .)
hdata %>% filter(!is.na(happy), happy != "DK", happy != "IAP") %>%
ggplot(aes(x = finrela, fill = happy)) + geom_bar(position = "fill") +
coord_flip()
suppressPackageStartupMessages(library(tidyverse))
data(ChickWeight)
?ChickWeight
glimpse(ChickWeight)
data.frame(ChickWeight %>%
count(Chick) %>%                          #count how many observations of each `Chick` there were
mutate(CompleteStatus = ifelse(n < 12,    #if there were less than 12 then note as
"Incomplete",    #Incomplete, otherwise note as
"Complete")) %>% #Complete
count(CompleteStatus))                    #then count how many complete and incomplete observation there are
complete <- ChickWeight %>%
add_count(Chick) %>%
filter(n == 12) %>%
select(-n)                 #remove count column as it is no longer needed
complete <- complete %>%
left_join(y = complete %>%
filter(Time == 0) %>%                #subset `Time` on day 0
select(Chick, origweight = weight),  #select only needed columns so there will not be extra variables
by = "Chick") %>%                      #join by `Chick`
mutate(weightgain = weight - origweight) %>%     #subtrack `origweight` from `weight` to get `weightgain`
select(-origweight)                              #remove helper column so it can be run again
complete %>% filter(Time == 21) %>%                #subset dataframe
ggplot(aes(x = reorder(Diet, weightgain,         #reorder `Diet` by
FUN = median, na.rm = T), #the median of `weightgain`
y = weightgain)) +
geom_boxplot() +                                 #create a boxplot
xlab("Diet")                                     #relabel the x-axis
complete %>%
ggplot(aes(x = Time, y = weight,  #put `Time` on x axis, and `weight` on y axis
color = Diet,          #use a different color for each `Diet`
group = Chick)) +      #creat a different line for each `Chick`
geom_line() +                     #add a line layer
geom_point() +                    #add a point layer
facet_wrap( ~ Diet) +             #facet for each `Diet`
theme(legend.position = "bottom") #put the legend on the bottom
data.frame(complete %>%
group_by(Diet) %>%
filter(weight == max(weight),
Time == 21))
maxChick <- complete %>%
inner_join(y = complete %>%
group_by(Diet) %>%
filter(weight == max(weight),
Time == 21) %>%
select(Diet, Chick),          #we only need the `Chick` column
by = c("Diet", "Chick")) %>%    #but I kept and joined on `Diet` as well
#to ensure there were no duplicate `Chick` id's
#in a different diet
ggplot(aes(x = Time, y = weight,  #Time on x axis, weight on y axis
color = Diet,          #different color for each Diet
group = Chick)) +      #different line for each Chick
geom_point() +                    #point layer
geom_line() +                     #line layer
theme(legend.position = "bottom") #put legend on the bottom
complete %>%
inner_join(y = complete %>%
group_by(Diet) %>%
filter(weight == max(weight),
Time == 21) %>%
select(Diet, Chick),          #we only need the `Chick` column
by = c("Diet", "Chick")) %>%    #but I kept and joined on `Diet` as well
#to ensure there were no duplicate `Chick` id's
#in a different diet
ggplot(aes(x = Time, y = weight,  #Time on x axis, weight on y axis
color = Diet,          #different color for each Diet
group = Chick)) +      #different line for each Chick
geom_point() +                    #point layer
geom_line() +                     #line layer
theme(legend.position = "bottom") #put legend on the bottom
complete %>%
group_by(Diet, Time) %>%
summarize(avgWeight = mean(weight)) %>%
ggplot(aes(x = Time, y = avgWeight,  #Time on x axis, weight on y axis
color = Diet)) +          #different color for each Diet
geom_point() +                       #point layer
geom_line() +                        #line layer
theme(legend.position = "bottom")    #put legend on the bottom
data("LifeCycleSavings")
data(LifeCycleSavings)
head(LifeCycleSavings)
lm(sr ~ pop15, LifeCycleSavings)
?LifeCycleSavings
fit <- lm(mpg ~ hp, data = mtcars) #fit the model
fit <- lm(dpi ~ sr, data = LifeCycleSavings) #fit the model
summary(fit)
fit <- lm(mpg ~ hp, data = mtcars) #fit the model
fit <- lm(mpg ~ hp, data = d) #fit the model
d <- mtcars
fit <- lm(mpg ~ hp, data = d) #fit the model
d$predicted <- predict(fit)   # Save the predicted values
d$residuals <- residuals(fit) # Save the residual values
residuals(fit)
data.frame(residuals(fit))
ggplot(aes(x= data.frame(residuals(fit)), y = data.frame(residuals(fit))))
ggplot(fit, aes(x= data.frame(residuals(fit)), y = data.frame(residuals(fit)))) + geom_point()
ggplot(lm(mpg ~ hp, data = mtcars), aes(x = .fitted, y = .resid)) + geom_point()
ggplot(lm(mpg ~ hp, data = mtcars),     #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1)
ggplot(lm(sr ~ ddpi, data = LifeCycleSavings),     #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1)
ggplot(lm(sr ~ ddpi, data = LifeCycleSavings),     #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", size = 1) +
xlab("Fitted Value") + ylab("Residuals")
FitVsResid <- function(data, x, y, col = "red") {
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "blue")
View(LifeCycleSavings)
LifeCycleSavings %>% select(sr)
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "blue")
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
x <- data %>% select(x)
y <- data %>% select(y)
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
ggplot(lm(x ~ y, data = data),                   #fit the model
aes_string(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
ggplot() +
geom_point(lm(x ~ y, data = data),                   #fit the model
aes_string(x = .fitted, y = .resid)) +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
data(LifeCycleSavings)                             #load the `LifeCycleSavings` dataframe
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "red")
data %>% select(x)
data %>% select_(x)
lm(x ~ y, data = data)
lm(x ~ y, data = data.frame(data))
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
FitVsResid <- function(data, x, y, col = "red") {
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
testfun <- function(data, x, y) {
lm(x ~ y, data = data.frame(data))
}
testfun(data = LifeCycleSavings, x = sr, y = ddpi)
testfun(data = LifeCycleSavings, x = LifeCycleSavings$sr, y = LifeCycleSavings$ddpi)
testfun <- function(data, x, y) {
x <- data[, x]
y <- data[, y]
lm(x ~ y, data = data.frame(data))
}
testfun(data = LifeCycleSavings, x = "sr", y = "ddpi")
FitVsResid <- function(data, x, y, col = "red") {
x <- data[, x]
y <- data[, y]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
data(LifeCycleSavings)                             #load the `LifeCycleSavings` dataframe
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "red")
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "blue")
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
x <- data[, as.character(x)]
y <- data[, as.character(y)]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
quote(x)
FitVsResid <- function(data, x, y, col = "red") {
x <- data[, quote(x)]
y <- data[, quote(y)]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
?quo_name
?quo
FitVsResid <- function(data, x, y, col = "red") {
x <- data[, quo(x)]
y <- data[, quo(y)]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
x <- data[, enquo(x)]
y <- data[, enquo(y)]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
x <- data %>% select(x)
y <- data %>% select(y)
# x <- data[, x]
# y <- data[, y]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
FitVsResid(data = LifeCycleSavings,
x = "sr", y = "ddpi",
col = "red")
FitVsResid <- function(data, x, y, col = "red") {
x <- data %>% select(!!x)
y <- data %>% select(!!y)
# x <- data[, x]
# y <- data[, y]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(data = LifeCycleSavings,
x = sr, y = ddpi,
col = "red")
?quote
FitVsResid <- function(x, y, col = "red") {
data <- data.frame(x = x, y = y)
# x <- data[, x]
# y <- data[, y]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid <- function(x, y, col = "red") {
data <- data.frame(x = x, y = y)
# x <- data[, x]
# y <- data[, y]
ggplot(lm(x ~ y, data = data),                   #fit the model
aes(x = .fitted, y = .resid)) +
geom_point() +
geom_hline(yintercept = 0, linetype = "dashed",
color = col, size = 1) +
xlab("Fitted Value") + ylab("Residuals")
}
FitVsResid(x = LifeCycleSavings$sr,
y = LifeCycleSavings$ddpi,
col = "red")
FitVsResid(x = LifeCycleSavings$sr,
y = LifeCycleSavings$ddpi,
col = "blue")
